// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison


// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the SudaDart configuration.


// SDK
import 'package:supabase_flutter/supabase_flutter.dart';


// No Intl package needed
// No Dart Convert needed
// Supadart Class
abstract class SupadartClass<T> {
  static Map<String, dynamic> insert(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  static Map<String, dynamic> update(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  factory SupadartClass.fromJson(Map<String, dynamic> json) {
    throw UnimplementedError();
  }

  static converter(List<Map<String, dynamic>> data) {
    throw UnimplementedError();
  }

  static converterSingle(Map<String, dynamic> data) {
    throw UnimplementedError();
  }
    
}



// Supabase Client Extension
extension SupadartClient on SupabaseClient {
SupabaseQueryBuilder get meals => from('meals');
SupabaseQueryBuilder get additions => from('additions');
SupabaseQueryBuilder get user_additions => from('user_additions');
SupabaseQueryBuilder get comments => from('comments');
SupabaseQueryBuilder get users => from('users');
}



// Supabase Storage Client Extension
extension SupadartStorageClient on SupabaseStorageClient {
}



// Enums

// Utils
class Meals implements SupadartClass<Meals> {
final int id;
final String name;
final String? description;
final String? imageUrl;
final DateTime? createdAt;
final num? price;

const Meals({
required this.id,
required this.name,
this.description,
this.imageUrl,
this.createdAt,
this.price,
});

static String get table_name => 'meals';
static String get c_id => 'id';
static String get c_name => 'name';
static String get c_description => 'description';
static String get c_imageUrl => 'image_url';
static String get c_createdAt => 'created_at';
static String get c_price => 'price';

static List<Meals> converter(List<Map<String, dynamic>> data) {
  return data.map(Meals.fromJson).toList();
}
static Meals converterSingle(Map<String, dynamic> data) {
  return Meals.fromJson(data);
}
static Map<String, dynamic> _generateMap({
int? id,
String? name,
String? description,
String? imageUrl,
DateTime? createdAt,
num? price,
}) {
return {
if (id != null) 'id': id,
if (name != null) 'name': name,
if (description != null) 'description': description,
if (imageUrl != null) 'image_url': imageUrl,
if (createdAt != null) 'created_at': createdAt.toIso8601String(),
if (price != null) 'price': price.toString(),
};
}
static Map<String, dynamic> insert({
  int? id,
  required String name,
  String? description,
  String? imageUrl,
  DateTime? createdAt,
  num? price,
}) {
return _generateMap(
  id: id,
  name: name,
  description: description,
  imageUrl: imageUrl,
  createdAt: createdAt,
  price: price,
);
}
static Map<String, dynamic> update({
int? id,
String? name,
String? description,
String? imageUrl,
DateTime? createdAt,
num? price,
}) {
return _generateMap(
  id: id,
  name: name,
  description: description,
  imageUrl: imageUrl,
  createdAt: createdAt,
  price: price,
);
}
factory Meals.fromJson(Map<String, dynamic> jsonn) {
return Meals(
id: jsonn['id'] != null ? int.parse(jsonn['id'].toString()) : 0,
name: jsonn['name'] != null ? jsonn['name'].toString() : '',
description: jsonn['description'] != null ? jsonn['description'].toString() : '',
imageUrl: jsonn['image_url'] != null ? jsonn['image_url'].toString() : '',
createdAt: jsonn['created_at'] != null ? DateTime.parse(jsonn['created_at'].toString()) : DateTime.fromMillisecondsSinceEpoch(0),
price: jsonn['price'] != null ? num.parse(jsonn['price'].toString()) : 0,
);
}

Map<String, dynamic> toJson() {
return _generateMap(
  id: id,
  name: name,
  description: description,
  imageUrl: imageUrl,
  createdAt: createdAt,
  price: price,
);
}
Meals copyWith({
int? id,
String? name,
String? description,
String? imageUrl,
DateTime? createdAt,
num? price,
}) {
return Meals(
id: id ?? this.id,
name: name ?? this.name,
description: description ?? this.description,
imageUrl: imageUrl ?? this.imageUrl,
createdAt: createdAt ?? this.createdAt,
price: price ?? this.price,
);
}

}


class Additions implements SupadartClass<Additions> {
final int id;
final int? mealId;
final String additionDescription;
final DateTime? createdAt;

const Additions({
required this.id,
this.mealId,
required this.additionDescription,
this.createdAt,
});

static String get table_name => 'additions';
static String get c_id => 'id';
static String get c_mealId => 'meal_id';
static String get c_additionDescription => 'addition_description';
static String get c_createdAt => 'created_at';

static List<Additions> converter(List<Map<String, dynamic>> data) {
  return data.map(Additions.fromJson).toList();
}
static Additions converterSingle(Map<String, dynamic> data) {
  return Additions.fromJson(data);
}
static Map<String, dynamic> _generateMap({
int? id,
int? mealId,
String? additionDescription,
DateTime? createdAt,
}) {
return {
if (id != null) 'id': id,
if (mealId != null) 'meal_id': mealId,
if (additionDescription != null) 'addition_description': additionDescription,
if (createdAt != null) 'created_at': createdAt.toIso8601String(),
};
}
static Map<String, dynamic> insert({
  int? id,
  int? mealId,
  required String additionDescription,
  DateTime? createdAt,
}) {
return _generateMap(
  id: id,
  mealId: mealId,
  additionDescription: additionDescription,
  createdAt: createdAt,
);
}
static Map<String, dynamic> update({
int? id,
int? mealId,
String? additionDescription,
DateTime? createdAt,
}) {
return _generateMap(
  id: id,
  mealId: mealId,
  additionDescription: additionDescription,
  createdAt: createdAt,
);
}
factory Additions.fromJson(Map<String, dynamic> jsonn) {
return Additions(
id: jsonn['id'] != null ? int.parse(jsonn['id'].toString()) : 0,
mealId: jsonn['meal_id'] != null ? int.parse(jsonn['meal_id'].toString()) : 0,
additionDescription: jsonn['addition_description'] != null ? jsonn['addition_description'].toString() : '',
createdAt: jsonn['created_at'] != null ? DateTime.parse(jsonn['created_at'].toString()) : DateTime.fromMillisecondsSinceEpoch(0),
);
}

Map<String, dynamic> toJson() {
return _generateMap(
  id: id,
  mealId: mealId,
  additionDescription: additionDescription,
  createdAt: createdAt,
);
}
Additions copyWith({
int? id,
int? mealId,
String? additionDescription,
DateTime? createdAt,
}) {
return Additions(
id: id ?? this.id,
mealId: mealId ?? this.mealId,
additionDescription: additionDescription ?? this.additionDescription,
createdAt: createdAt ?? this.createdAt,
);
}

}


class UserAdditions implements SupadartClass<UserAdditions> {
final int id;
final int userId;
final int mealId;
final String addition;
final DateTime? createdAt;

const UserAdditions({
required this.id,
required this.userId,
required this.mealId,
required this.addition,
this.createdAt,
});

static String get table_name => 'user_additions';
static String get c_id => 'id';
static String get c_userId => 'user_id';
static String get c_mealId => 'meal_id';
static String get c_addition => 'addition';
static String get c_createdAt => 'created_at';

static List<UserAdditions> converter(List<Map<String, dynamic>> data) {
  return data.map(UserAdditions.fromJson).toList();
}
static UserAdditions converterSingle(Map<String, dynamic> data) {
  return UserAdditions.fromJson(data);
}
static Map<String, dynamic> _generateMap({
int? id,
int? userId,
int? mealId,
String? addition,
DateTime? createdAt,
}) {
return {
if (id != null) 'id': id,
if (userId != null) 'user_id': userId,
if (mealId != null) 'meal_id': mealId,
if (addition != null) 'addition': addition,
if (createdAt != null) 'created_at': createdAt.toIso8601String(),
};
}
static Map<String, dynamic> insert({
  int? id,
  required int userId,
  required int mealId,
  required String addition,
  DateTime? createdAt,
}) {
return _generateMap(
  id: id,
  userId: userId,
  mealId: mealId,
  addition: addition,
  createdAt: createdAt,
);
}
static Map<String, dynamic> update({
int? id,
int? userId,
int? mealId,
String? addition,
DateTime? createdAt,
}) {
return _generateMap(
  id: id,
  userId: userId,
  mealId: mealId,
  addition: addition,
  createdAt: createdAt,
);
}
factory UserAdditions.fromJson(Map<String, dynamic> jsonn) {
return UserAdditions(
id: jsonn['id'] != null ? int.parse(jsonn['id'].toString()) : 0,
userId: jsonn['user_id'] != null ? int.parse(jsonn['user_id'].toString()) : 0,
mealId: jsonn['meal_id'] != null ? int.parse(jsonn['meal_id'].toString()) : 0,
addition: jsonn['addition'] != null ? jsonn['addition'].toString() : '',
createdAt: jsonn['created_at'] != null ? DateTime.parse(jsonn['created_at'].toString()) : DateTime.fromMillisecondsSinceEpoch(0),
);
}

Map<String, dynamic> toJson() {
return _generateMap(
  id: id,
  userId: userId,
  mealId: mealId,
  addition: addition,
  createdAt: createdAt,
);
}
UserAdditions copyWith({
int? id,
int? userId,
int? mealId,
String? addition,
DateTime? createdAt,
}) {
return UserAdditions(
id: id ?? this.id,
userId: userId ?? this.userId,
mealId: mealId ?? this.mealId,
addition: addition ?? this.addition,
createdAt: createdAt ?? this.createdAt,
);
}

}


class Comments implements SupadartClass<Comments> {
final int id;
final int? userId;
final int? mealId;
final String? comment;
final int? rating;
final DateTime? createdAt;

const Comments({
required this.id,
this.userId,
this.mealId,
this.comment,
this.rating,
this.createdAt,
});

static String get table_name => 'comments';
static String get c_id => 'id';
static String get c_userId => 'user_id';
static String get c_mealId => 'meal_id';
static String get c_comment => 'comment';
static String get c_rating => 'rating';
static String get c_createdAt => 'created_at';

static List<Comments> converter(List<Map<String, dynamic>> data) {
  return data.map(Comments.fromJson).toList();
}
static Comments converterSingle(Map<String, dynamic> data) {
  return Comments.fromJson(data);
}
static Map<String, dynamic> _generateMap({
int? id,
int? userId,
int? mealId,
String? comment,
int? rating,
DateTime? createdAt,
}) {
return {
if (id != null) 'id': id,
if (userId != null) 'user_id': userId,
if (mealId != null) 'meal_id': mealId,
if (comment != null) 'comment': comment,
if (rating != null) 'rating': rating,
if (createdAt != null) 'created_at': createdAt.toIso8601String(),
};
}
static Map<String, dynamic> insert({
  int? id,
  int? userId,
  int? mealId,
  String? comment,
  int? rating,
  DateTime? createdAt,
}) {
return _generateMap(
  id: id,
  userId: userId,
  mealId: mealId,
  comment: comment,
  rating: rating,
  createdAt: createdAt,
);
}
static Map<String, dynamic> update({
int? id,
int? userId,
int? mealId,
String? comment,
int? rating,
DateTime? createdAt,
}) {
return _generateMap(
  id: id,
  userId: userId,
  mealId: mealId,
  comment: comment,
  rating: rating,
  createdAt: createdAt,
);
}
factory Comments.fromJson(Map<String, dynamic> jsonn) {
return Comments(
id: jsonn['id'] != null ? int.parse(jsonn['id'].toString()) : 0,
userId: jsonn['user_id'] != null ? int.parse(jsonn['user_id'].toString()) : 0,
mealId: jsonn['meal_id'] != null ? int.parse(jsonn['meal_id'].toString()) : 0,
comment: jsonn['comment'] != null ? jsonn['comment'].toString() : '',
rating: jsonn['rating'] != null ? int.parse(jsonn['rating'].toString()) : 0,
createdAt: jsonn['created_at'] != null ? DateTime.parse(jsonn['created_at'].toString()) : DateTime.fromMillisecondsSinceEpoch(0),
);
}

Map<String, dynamic> toJson() {
return _generateMap(
  id: id,
  userId: userId,
  mealId: mealId,
  comment: comment,
  rating: rating,
  createdAt: createdAt,
);
}
Comments copyWith({
int? id,
int? userId,
int? mealId,
String? comment,
int? rating,
DateTime? createdAt,
}) {
return Comments(
id: id ?? this.id,
userId: userId ?? this.userId,
mealId: mealId ?? this.mealId,
comment: comment ?? this.comment,
rating: rating ?? this.rating,
createdAt: createdAt ?? this.createdAt,
);
}

}


class Users implements SupadartClass<Users> {
final int id;
final String username;
final String email;
final String password;
final DateTime? createdAt;

const Users({
required this.id,
required this.username,
required this.email,
required this.password,
this.createdAt,
});

static String get table_name => 'users';
static String get c_id => 'id';
static String get c_username => 'username';
static String get c_email => 'email';
static String get c_password => 'password';
static String get c_createdAt => 'created_at';

static List<Users> converter(List<Map<String, dynamic>> data) {
  return data.map(Users.fromJson).toList();
}
static Users converterSingle(Map<String, dynamic> data) {
  return Users.fromJson(data);
}
static Map<String, dynamic> _generateMap({
int? id,
String? username,
String? email,
String? password,
DateTime? createdAt,
}) {
return {
if (id != null) 'id': id,
if (username != null) 'username': username,
if (email != null) 'email': email,
if (password != null) 'password': password,
if (createdAt != null) 'created_at': createdAt.toIso8601String(),
};
}
static Map<String, dynamic> insert({
  int? id,
  required String username,
  required String email,
  required String password,
  DateTime? createdAt,
}) {
return _generateMap(
  id: id,
  username: username,
  email: email,
  password: password,
  createdAt: createdAt,
);
}
static Map<String, dynamic> update({
int? id,
String? username,
String? email,
String? password,
DateTime? createdAt,
}) {
return _generateMap(
  id: id,
  username: username,
  email: email,
  password: password,
  createdAt: createdAt,
);
}
factory Users.fromJson(Map<String, dynamic> jsonn) {
return Users(
id: jsonn['id'] != null ? int.parse(jsonn['id'].toString()) : 0,
username: jsonn['username'] != null ? jsonn['username'].toString() : '',
email: jsonn['email'] != null ? jsonn['email'].toString() : '',
password: jsonn['password'] != null ? jsonn['password'].toString() : '',
createdAt: jsonn['created_at'] != null ? DateTime.parse(jsonn['created_at'].toString()) : DateTime.fromMillisecondsSinceEpoch(0),
);
}

Map<String, dynamic> toJson() {
return _generateMap(
  id: id,
  username: username,
  email: email,
  password: password,
  createdAt: createdAt,
);
}
Users copyWith({
int? id,
String? username,
String? email,
String? password,
DateTime? createdAt,
}) {
return Users(
id: id ?? this.id,
username: username ?? this.username,
email: email ?? this.email,
password: password ?? this.password,
createdAt: createdAt ?? this.createdAt,
);
}

}

